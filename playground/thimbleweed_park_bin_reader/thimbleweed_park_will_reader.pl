#!/bin/perl

use strict;
use warnings;

my $will = <<'E';
11010010 10111010 11000001 11010111 11110010
10111010 10111100 01111110 00101001 10010001
11111010 01100110 10001010 10000111 01011111
00000010 11001111 11000101 01101000 11101111
10010111 00111000 00010000 11000001 00000111
00010110 11001110 01100001 11111100 10011100
00011011 00001101 11000001 01001110 11110100
11100010 00111110 00100100 01011110 11000110
11100010 01111110 10110000 11001011 01110010
00110110 00001111 01000000 10010010 10111000
11011111 11010111 10000001 10111011 10001000
11010010 11110010 11100000 00000101 10010011
01111010 01110101 00001100 10011000 11010100
11010000 00011101 11011011 11010101 00111010
01100111 01000010 01101101 10011101 00111001
01101100 10111011 11011010 11110001 01110101
10010000 10001001 10010000 01000010 10100110
01001001 11100100 10000011 11111010 00101110
10111110 00101001 01011001 01010100 11110010
11100110 11010000 10101111 00011100 10101101
00010001 10101011 11010111 10010000 00010000
10100000 11110100 00000101 01011010 01011100
01101111 01111100 10010110 00001001 10011001
01110111 11111011 11100101 11100100 00111111
         11010000 00011001 00100010 01101110
                       101 01111001 10011000
                                         101
E

my $book1 = <<'E';
01000011 01101111 01101110 01100111 01110010
01100001 01110100 01110101 01101100 01100001
01110100 01101001 01101111 01101110 01110011
00100000 01101111 01101110 00100000 01100010
01100101 01101001 01101110 01100111 00100000
01100001 00100000 01100011 01110101 01101110
01101110 01101001 01101110 01100111 00100000
01110010 01101111 01100010 01101111 01110100
00101110 00100000 01010100 01101000 01101001
01110011 00100000 01100010 01101111 01101111
01101011 00100000 01110111 01101001 01101100
01101100 00100000 01100010 01100101 00100000
01110100 01101000 01100101 00100000 01100100
01101111 01101111 01101101 00100000 01101111
01100110 00100000 01111001 01101111 01110101
01110010 00100000 01101000 01100001 01110100
01100101 01100100 00101100 00100000 01101100
01110101 01100100 01101001 01100011 01110010
01101111 01110101 01110011 00101100 00100000
01100110 01101100 01100101 01110011 01101000
01111001 00101100 00100000 01110011 01101111
01100110 01110100 00100000 01101101 01100001
01110011 01110100 01100101 01110010 01110011
00101110 00100000 00001101 00001010 00001101
00001010 01001000 01100001 00100000 01101000
01100001 00100000 01101000 01100001 00100001
00100000 01010100 01101000 01100101 01111001
00100000 01110011 01101000 01100001 01101100
01101100
E

my $book2 = <<'E';
01001000 01001001 00100000 01001000 01010101 
01001101 01000001 01001110 00101110 00100000 
01010000 01001100 01000101 01000001 01010011 
01000101 00100000 01001000 01000101 01001100 
01010000 00100000 01001001 00100000 01000001 
01001101 00100000 01010100 01010010 01000001 
01010000 01010000 01000101 01000100 00100000 
01001001 01001110 00100000 01010100 01001000 
01001001 01010011 00100000 01000010 01001111 
01001111 01001011 00101110 00100000
E

sub translate {
    my ( $text_name, $text ) = @_;
    print "-------------------------\n";
    print "Translating $text_name...\n";
    my @bytes = split /(?:\s+|\n+)/, $text;
    translate_little_endian( \@bytes );
    translate_big_endian( \@bytes );
}

sub translate_little_endian {
    my ($bytes) = @_;
    print "Little endian\n";
    for (@$bytes) {
        my $lec = sprintf '%c', eval "0b$_";
        print $lec if ( $lec =~ /\w|[,.?! \n]/ );
    }
    print "\n";
}

sub translate_big_endian {
    my ($bytes) = @_;
    print "\nBig endian\n";
    for (@$bytes) {
        my $be  = reverse($_);
        my $bec = sprintf '%c', eval "0b$be";
        print $bec if ( $bec =~ /\w|[,.?! \n]/ );
    }
    print "\n";
}

translate( 'Will', $will );
print "\n";
translate( 'Book 1', $book1 );
print "\n";
translate( 'Book 2', $book2 );
